{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport App from 'next/app';\nimport firebaseConfig from \"../src/config/firebaseConfig\";\nimport { UserContext } from \"../src/contexts/UserContext\"; //toast\n\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState({});\n  return __jsx(React.Fragment, null, __jsx(ToastContainer, null), __jsx(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    }\n  }, __jsx(Component, pageProps)));\n}\n\nMyApp.getInitialProps = async appContext => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread({}, appProps);\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}